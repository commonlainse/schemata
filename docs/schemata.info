This is schemata.info, produced by makeinfo version 6.7 from
schemata.texi.

Copyright (C) 2021 Mariano Montone

INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* schemata: (schemata) Schema validation and serialization library for Common Lisp.
END-INFO-DIR-ENTRY


File: schemata.info,  Node: Top,  Next: Intro,  Up: (dir)

Top
***

* Menu:

* Intro::
* Installation::
* Usage::
* Schema types::
* Data generation::
* Reference::
* Index::


File: schemata.info,  Node: Intro,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

Generic purpose schema library for serialization and validation of data.

   This library is used by CL-REST-SERVER for API serialization and
validation.

   It features:

   * Validation using schemas.
   * Serialization and unserialization using schemas.
   * Generation of (random) data from schemas.  (incomplete
     implementation atm)
   * JSON-Schema parsing (incomplete implementation atm).
   * Integration with Common Lisp type system.
   * A schema class metaclass.


File: schemata.info,  Node: Installation,  Next: Usage,  Prev: Intro,  Up: Top

2 Installation
**************

With Quicklisp:

     (ql:quickload "schemata")


File: schemata.info,  Node: Usage,  Next: Schema types,  Prev: Installation,  Up: Top

3 Usage
*******

3.1 Schema definition
=====================

Use *note DEFSCHEMA: SCHEMATA:DEFSCHEMA macro.for defining schemas.

   Schema example:

     (schemata:defschema customer
         (object "customer"
                  ((id string :external-name "id" :accessor
                       customer-id :documentation "customer id")
                   (number string :external-name "number" :required nil
                                   :accessor customer-nr :documentation
                           "customer number")
                   (name string :external-name "name" :accessor
                         customer-name :documentation "customer name")
                   (address-1 string :external-name "address1"
                                      :required nil :documentation
                              "customer first address")
                   (address-2 string :external-name "address2"
                                      :required nil :documentation
                              "customer second address")
                   (postal-code string :external-name "postalcode"
                                        :required nil :documentation
                                "postal code")
                   (postal-area string :external-name "postalarea"
                                        :required nil :documentation
                                "postal area")
                   (country string :external-name "country" :required nil
                            :documentation "country code")
                   (phone string :external-name "phone" :required nil
                                  :documentation "phone")
                   (fax string :external-name "fax" :required nil
                                :documentation "fax")
                   (email string :external-name "email" :required nil
                                  :documentation "email"))
                  (:documentation "customer data fetched")))

3.2 Validation using schemas
============================

Use *note VALIDATE-WITH-SCHEMA: SCHEMATA:VALIDATE-WITH-SCHEMA function.

3.3 Serialization using schemas
===============================

Via _generic-serializer_ library.

   Use *note SERIALIZE-WITH-SCHEMA: SCHEMATA:SERIALIZE-WITH-SCHEMA
function.

     (with-output-to-string (s)
         (gs:with-serializer-output s
             (gs:with-serializer :json
                (serialize-with-schema *schema* user))))

     (with-output-to-string (s)
       (gs:with-serializer-output s
         (gs:with-serializer :json
           (serialize-with-schema
            (find-schema 'user-schema) *user*))))

3.4 Unserialization using schemas
=================================

Use *note UNSERIALIZE-WITH-SCHEMA: SCHEMATA:UNSERIALIZE-WITH-SCHEMA
function.

     (unserialize-with-schema
        (find-schema 'user-schema)
        (json:decode-json-from-string data)
        :json)

3.5 Patch and updates
=====================

See *note PATCH-WITH-SCHEMA: SCHEMATA:PATCH-WITH-SCHEMA function.and
*note POPULATE-WITH-SCHEMA: SCHEMATA:POPULATE-WITH-SCHEMA function.


File: schemata.info,  Node: Schema types,  Next: Data generation,  Prev: Usage,  Up: Top

4 Schema types
**************

4.1 Type schemas
================

Schemas can be built from Common Lisp types:

SCHEMATA> (defparameter *s* (schema string))
*S*
SCHEMATA> *s*
#<TYPE-SCHEMA STRING {1006FBBD13}>
SCHEMATA> (validate-with-schema *s* "22")
NIL
SCHEMATA> (validate-with-schema *s* 22 :error-p nil)
#<VALIDATION-ERROR "~s is not of type: ~a" {100152EB13}>

4.2 Object schema
=================

Object schemas are built using the syntax: '(object name attributes
options)'.  Attributes are specified as: '(attribute-name attribute-type
&rest options)'.

   The 'attribute-type' is parsed as a schema.

   Possible attribute options are: 'required', 'required-message',
'default', 'accessor', 'writer', 'reader', 'parser', 'validator',
'add-validator', 'formatter', 'external-name', 'serializer',
'unserializer', 'slot'.

   Example:

SCHEMATA> (schema (object person
                          ((name string)
                           (age integer :required nil))))
#<OBJECT-SCHEMA {1001843543}>

4.3 List schemas
================

4.3.1 list-of
-------------

Schema for lists with elements of certain type/schema.

   Syntax: '(list-of list-element-schema)'

   Examples:

     (schema (list-of string))

     (schema (list-of (or string number)))

SCHEMATA> (defparameter *s* (schema (list-of integer)))
*S*
SCHEMATA> (validate-with-schema *s* '(1 2 "foo"))
; Evaluation aborted on #<SCHEMATA:VALIDATION-ERROR "~s is not of type: ~a" {1006ECA323}>.
SCHEMATA> (validate-with-schema *s* '(1 2 3))
NIL

4.3.2 list
----------

Schema for list with all its elements specified with schemas.

   Syntax: '(list &rest schemas)'

   Examples:

     (schema (list string number boolean))

4.3.3 alist-of
--------------

Schema for association lists with certain type of keys and values.

   Syntax: '(alist-of (key-schema . value-schema))'

   Examples:

     (schema (alist-of (keyword . string)))

4.3.4 alist
-----------

Schema for association lists with certain keys and values.

   Syntax: '(alist association-list &rest options)'

   where association-list is a list of conses with key and schema.

   Options can be ':required-keys', ':optional-keys' and
':allow-other-keys'.

   Examples:

     (schema (alist ((:x . string)(:y . number))))

     (schema (alist ((:x . string)(:y . number)) :optional-keys (:y)))

4.3.5 plist-of
--------------

Schema for property lists with certain type of keys and values.

   Syntax: '(plist-of key-schema value-schema)'

   Examples:

     (schema (plist-of keyword string))

4.3.6 plist
-----------

Schema for property lists with certain keys and values.

   Syntax: '(plist property-list &rest options)'

   where property-list specifies the schemas for the keys.

   Options can be ':required-keys', ':optional-keys' and
':allow-other-keys'.

   Examples:

     (schema (plist (:x string :y number)))

     (schema (plist (:x string :y number) :optional-keys (:y)))

4.4 HASH-TABLE schemas
======================

4.5 CONS schema
===============

4.6 AND and OR schemas
======================

4.7 Schema references
=====================

Defined schemas can be referenced via either '(schema schema-name)' or
'(ref schema-name)' (they are identical).

   Example:

SCHEMATA> (defschema person
            (object person
                    ((name string))))
#<OBJECT-SCHEMA {1006F8A813}>
SCHEMATA> (defparameter *list-of-person* (schema (list-of (ref person))))
*LIST-OF-PERSON*
SCHEMATA> *list-of-person*
#<LIST-SCHEMA {1006F8C2A3}>
SCHEMATA> (parse-with-schema *list-of-person* '((("name" . "Mariano")) (("name" . "Peter"))))
(((NAME . "Mariano")) ((NAME . "Peter")))
SCHEMATA> (validate-with-schema *list-of-person* '((("name" . 22)) (("name" . "Peter"))))
; processing (DEFMETHOD SCHEMA-VALIDATE ...); Evaluation aborted on #<SB-PCL::NO-APPLICABLE-METHOD-ERROR {1008018513}>.
SCHEMATA> (validate-with-schema *list-of-person* '((("name" . 22)) (("name" . "Peter"))))
; Evaluation aborted on #<SCHEMATA:VALIDATION-ERROR "~s is not of type: ~a" {10082EB883}>.
SCHEMATA> (validate-with-schema *list-of-person* '((("name" . "Mariano")) (("name" . "Peter"))))
NIL
SCHEMATA> (validate-with-schema *list-of-person* '((("names" . "Mariano")) (("name" . "Peter"))))
; Evaluation aborted on #<SCHEMATA:VALIDATION-ERROR "Attributes not part of schema: ~a" {1008CD3DD3}>.

5 SATISFIES-SCHEMA type
***********************

Schemata integrates with the Lisp type system via the SATISFIES-SCHEMA
type.  Schemas can be thought as types over data.  Defined schemas can
be checked using TYPEP and CHECK-TYPE with the type '(satisfies-schema
schema-name)'.

   Example:

SCHEMATA> (defschema string-schema string)
#<TYPE-SCHEMA STRING {10019DA8B3}>
SCHEMATA> (typep "foo" '(satisfies-schema string-schema))
T
SCHEMATA> (typep 22 '(satisfies-schema string-schema))
NIL
SCHEMATA> (let ((x "foo"))
            (check-type x (satisfies-schema string-schema))
            x)
"foo"

6 SCHEMA-CLASS metaclass
************************

SCHEMA-CLASS classes get an schema attached.

   Example:

SCHEMATA> (def-schema-class person ()
            ((name :type string :initarg :name)
             (age :type integer :required nil :initarg :age)))
#<SCHEMA-CLASS SCHEMATA::PERSON>

SCHEMATA> (validate-with-schema (find-class 'person) '(("name" . "Mariano") ("age" . 22)))
NIL

SCHEMATA> (validate-with-schema (find-class 'person) '(("name" . "Mariano") ("age" . 'asdf)) :error-p nil)
#<VALIDATION-ERROR 'ASDF is not of type: INTEGER {100109F833}>

SCHEMATA> (generic-serializer:with-serializer :json
            (generic-serializer:serialize (make-instance 'person :name "Mariano" :age 44)))
{"name":"Mariano","age":44}


File: schemata.info,  Node: Data generation,  Next: Reference,  Prev: Schema types,  Up: Top

7 Data generation
*****************

Schemata can generate random data from schemas.  It uses 'check-it'
library generators for that.

   Load 'schemata-generators' system.

   Then call 'check-it:generate' with a schema object.

   Example:

     (defschema person
         (object person
                 ((name string)
                  (age integer :required nil)
                  (friend (ref person) :required nil))))

     (generate (find-schema 'person))

   can generate:

     ((NAME . "21p7E0w8")
      (FRIEND (NAME . "hD39Dwo")
       (FRIEND (NAME . "QFC67xg206") (AGE . 4)
        (FRIEND (NAME . "bRtUL1z51")
         (FRIEND (NAME . "0")
          (FRIEND (NAME . "ddB57idmh32C4T") (AGE . 1)
           (FRIEND (NAME . "eNKzc") (AGE . 8))))))))

   For more control over the generation, attach a generator to schemas
via ':generator' initarg.


File: schemata.info,  Node: Reference,  Next: Index,  Prev: Data generation,  Up: Top

8 Reference
***********

* Menu:

* SCHEMATA package::


File: schemata.info,  Node: SCHEMATA package,  Up: Reference

8.1 SCHEMATA package
====================

 -- PACKAGE: SCHEMATA

External definitions
====================

Macros
------

 -- Macro: SCHEMATA:SCHEMA (schema-def)

     Wrapper macro for schema definitions.

 -- Macro: SCHEMATA:DEFSCHEMA (name schema)

     Register SCHEMA under NAME. The schema can then be accessed via
     FIND-SCHEMA.

 -- Macro: SCHEMATA:DEF-SCHEMA-CLASS (name direct-superclasses
          direct-slots &rest options)

     Helper macro to define schema classes

Generic functions
-----------------

 -- Generic-Function: SCHEMATA:SCHEMA-TYPE (sb-pcl::object)

 -- Generic-Function: SCHEMATA:OBJECT-NAME (sb-pcl::object)

 -- Generic-Function: SCHEMATA:OBJECT-CLASS (sb-pcl::object)

 -- Generic-Function: SCHEMATA:SCHEMA-GENERATOR (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-REQUIRED-P (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-ACCESSOR (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-ADD-VALIDATOR (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-EXTERNAL-NAME (sb-pcl::object)

 -- Generic-Function: SCHEMATA:UNSERIALIZE-WITH-SCHEMA (schema data
          format)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-FORMATTER (sb-pcl::object)

 -- Generic-Function: SCHEMATA:SCHEMA-DOCUMENTATION (sb-pcl::object)

 -- Generic-Function: SCHEMATA:PARSE-WITH-SCHEMA (schema string-or-data)

     Parses the string to an association list using the schema

 -- Generic-Function: SCHEMATA:ATTRIBUTE-TYPE (sb-pcl::object)

 -- Generic-Function: SCHEMATA:OBJECT-ATTRIBUTES (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-NAME (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-PARSER (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-VALIDATOR (sb-pcl::object)

Functions
---------

 -- Function: SCHEMATA:ATTRIBUTE-TYPE-NAME (attribute)

 -- Function: SCHEMATA:ATTRIBUTE-READER (attribute)

 -- Function: SCHEMATA:POPULATE-WITH-SCHEMA (schema object data &key
          exclude)

     Populate CLOS objects from data + schema.  Attributes members of
     EXCLUDE parameter are not populated.

 -- Function: SCHEMATA:ATTRIBUTE-OPTIONAL-P (attribute)

 -- Function: SCHEMATA:SCHEMA-CLASS-SCHEMA (schema-class)

     Generate a schema using the schema class meta info

 -- Function: SCHEMATA:SERIALIZE-WITH-SCHEMA (schema input &optional
          (serializer generic-serializer::*serializer*) (stream
          generic-serializer::*serializer-output*))

 -- Function: SCHEMATA:SCHEMA-SPEC (schema)

 -- Function: SCHEMATA:FIND-OBJECT-ATTRIBUTE (object attribute-name &key
          (error-p t))

 -- Function: SCHEMATA:PATCH-WITH-SCHEMA (schema object data)

     Populate CLOS objects from data + schema.  Only populates
     attributes available in DATA, validating them.  Useful for PATCH
     rest api operations implementations.  DATA should be an association
     list.

 -- Function: SCHEMATA:ATTRIBUTE-WRITER (attribute)

 -- Function: SCHEMATA:VALIDATION-ERROR (message &rest args)

 -- Function: SCHEMATA:FIND-SCHEMA (name &optional (errorp t))

     Find a schema definition by name

 -- Function: SCHEMATA:VALIDATE-WITH-SCHEMA (schema data &key
          (collect-errors *collect-validation-errors*) (error-p
          *signal-validation-errors*))

     Validate input using schema.  Useful for validating resource
     operations posted content (for :post and :put methods).  Input can
     be a string or an association list.

     Args: - schema (symbol or schema): The schema - data (alist): The
     data to validate.  - format (keyword): The data format.  -
     collect-errors (boolean): If true, collect all the validation
     errors.  If false, return the first validation error found.
     Default: true.  - error-p (boolean): If true, when validation
     errors are found, a validation error is signaled.  If false, the
     validation errors are returned as the function result and no error
     is signaled.

 -- Function: SCHEMATA:GENERATE-SCHEMA-FROM-CLASS (class)

     Generate a schema from CLASS, using reflection.

Classes
-------

 -- Class: SCHEMATA:OBJECT-SCHEMA

     Class precedence list: 'object-schema, schema, standard-object, t'

     Slots:
        * 'name' -- type: '(or string symbol)'; initarg: ':name';
          reader: 'schemata:object-name'; writer:
          '(setf schemata:object-name)'

          The name of the object.
        * 'attributes' -- type: 'list'; initarg: ':attributes'; reader:
          'schemata:object-attributes'; writer:
          '(setf schemata:object-attributes)'

        * 'class' -- type: '(or null symbol)'; initarg: ':class';
          reader: 'schemata:object-class'; writer:
          '(setf schemata:object-class)'

        * 'ignore-unknown-attributes' -- type: 'boolean'; initarg:
          ':ignore-unknown-attributes'; reader:
          'schemata::ignore-unknown-attributes'; writer:
          '(setf schemata::ignore-unknown-attributes)'

        * 'serializer' -- type:
          '(or null                                                trivial-types:function-designator)';
          initarg: ':serializer'; reader: 'schemata::object-serializer';
          writer: '(setf schemata::object-serializer)'

        * 'unserializer' -- type:
          '(or null                                                  trivial-types:function-designator)';
          initarg: ':unserializer'; reader:
          'schemata::object-unserializer'; writer:
          '(setf schemata::object-unserializer)'

 -- Class: SCHEMATA:CONS-SCHEMA

     Schema for CONSes.

     Syntax: (cons car-schema cdr-schema)

     Examples:

     (schema (cons symbol string))

     Class precedence list: 'cons-schema, schema, standard-object, t'

     Slots:
        * 'car-schema' -- type: 't'; initarg: ':car-schema'; reader:
          'schemata::car-schema'; writer: '(setf schemata::car-schema)'

          The schema of CAR.
        * 'cdr-schema' -- type: 't'; initarg: ':cdr-schema'; reader:
          'schemata::cdr-schema'; writer: '(setf schemata::cdr-schema)'

          The schema of CDR.

 -- Class: SCHEMATA:LIST-OF-SCHEMA

     Schema for list with elements of certain type/schema.

     Syntax: (list-of schema)

     Examples:

     (schema (list-of string)) (schema (list-of (or string number)))

     Class precedence list: 'list-of-schema, schema, standard-object, t'

     Slots:
        * 'elements-schema' -- type: '(not null)'; initarg:
          ':elements-schema'; reader: 'schemata::elements-schema';
          writer: '(setf schemata::elements-schema)'

          Schema of the elements of the list

 -- Class: SCHEMATA:PLIST-OF-SCHEMA

     Schema for property lists with certain type of keys and values.

     Syntax: (plist-of key-schema value-schema)

     Examples:

     (schema (plist-of keyword string))

     Class precedence list: 'plist-of-schema, schema, standard-object,
     t'

     Slots:
        * 'key-schema' -- type: 't'; initarg: ':key-schema'; reader:
          'schemata::key-schema'; writer: '(setf schemata::key-schema)'

        * 'value-schema' -- type: 't'; initarg: ':value-schema'; reader:
          'schemata::value-schema'; writer:
          '(setf schemata::value-schema)'

 -- Class: SCHEMATA:SCHEMA

     Class precedence list: 'schema, standard-object, t'

     Slots:
        * 'documentation' -- type: '(or null string)'; initarg:
          ':documentation'; reader: 'schemata:schema-documentation';
          writer: '(setf schemata:schema-documentation)'

        * 'generator' -- type: 't'; initarg: ':generator'; reader:
          'schemata:schema-generator'; writer:
          '(setf schemata:schema-generator)'

 -- Class: SCHEMATA:ALIST-OF-SCHEMA

     Schema for association lists with certain type of keys and values.

     Syntax: (alist-of (key-schema .  value-schema))

     Examples:

     (schema (alist-of (keyword .  string)))

     Class precedence list: 'alist-of-schema, schema, standard-object,
     t'

     Slots:
        * 'key-schema' -- type: 't'; initarg: ':key-schema'; reader:
          'schemata::key-schema'; writer: '(setf schemata::key-schema)'

        * 'value-schema' -- type: 't'; initarg: ':value-schema'; reader:
          'schemata::value-schema'; writer:
          '(setf schemata::value-schema)'

 -- Class: SCHEMATA:PLIST-SCHEMA

     Schema for property lists with certain keys and values.

     Syntax: (plist property-list &rest options)

     where property-list specifies the schemas for the keys.

     Options can be :required-keys, :optional-keys and
     :allow-other-keys.

     Examples:

     (schema (plist (:x string :y number))) (schema (plist (:x string :y
     number) :optional-keys (:y)))

     Class precedence list: 'plist-schema, schema, standard-object, t'

     Slots:
        * 'members' -- type: 't'; initarg: ':members'; reader:
          'schemata::plist-members'; writer:
          '(setf schemata::plist-members)'

        * 'required-keys' -- type: 't'; initarg: ':required-keys';
          reader: 'schemata::required-keys'; writer:
          '(setf schemata::required-keys)'

        * 'optional-keys' -- type: 't'; initarg: ':optional-keys';
          reader: 'schemata::optional-keys'; writer:
          '(setf schemata::optional-keys)'

        * 'allow-other-keys' -- type: 't'; initarg: ':allow-other-keys';
          reader: 'schemata::allow-other-keys-p'; writer:
          '(setf schemata::allow-other-keys-p)'

 -- Class: SCHEMATA:LIST-SCHEMA

     Schema for lists.

     Syntax: (list &rest schemas)

     Examples:

     (schema (list string number)) (schema (list symbol number boolean))

     Data matches when it is a list of the same size and the list
     schemas match.  For instance, for the schema: (list symbol number
     symbol), '(foo 33 bar) matches, but '(foo 33) does not.

     Class precedence list: 'list-schema, schema, standard-object, t'

     Slots:
        * 'schemas' -- type: 't'; initarg: ':schemas'; reader:
          'schemata::list-schemas'; writer:
          '(setf schemata::list-schemas)'

 -- Class: SCHEMATA:SCHEMA-REFERENCE-SCHEMA

     Class precedence list: 'schema-reference-schema, schema,
     standard-object, t'

     Slots:
        * 'name' -- type: 'symbol'; initarg: ':schema-name'; reader:
          'schemata::schema-name'; writer:
          '(setf schemata::schema-name)'

 -- Class: SCHEMATA:ALIST-SCHEMA

     Schema for association lists with certain keys and values.

     Syntax: (alist association-list &rest options)

     where association-list is a list of conses with key and schema.

     Options can be :required-keys, :optional-keys and
     :allow-other-keys.

     Examples:

     (schema (alist ((:x .  string)(:y .  number)))) (schema (alist ((:x
     .  string)(:y .  number)) :optional-keys (:y)))

     Class precedence list: 'alist-schema, schema, standard-object, t'

     Slots:
        * 'members' -- type: 't'; initarg: ':members'; reader:
          'schemata::alist-members'; writer:
          '(setf schemata::alist-members)'

        * 'required-keys' -- type: '(or boolean list)'; initarg:
          ':required-keys'; reader: 'schemata::required-keys'; writer:
          '(setf schemata::required-keys)'

          If T (default), all keys are considered required.  If a list,
          only those listed are considered required.
        * 'optional-keys' -- type:
          '(or                                                                                                     boolean                                                                                                     list)';
          initarg: ':optional-keys'; reader: 'schemata::optional-keys';
          writer: '(setf schemata::optional-keys)'

          If T, then all keys are considered optional.  If a list, then
          the keys listed are considered optional.
        * 'allow-other-keys' -- type: 't'; initarg: ':allow-other-keys';
          reader: 'schemata::allow-other-keys-p'; writer:
          '(setf schemata::allow-other-keys-p)'

          Whether other keys than the specified are allowed in the data
          being checked.

 -- Class: SCHEMATA:SCHEMA-CLASS

     Metaclass for schema objects

     Class precedence list: 'schema-class, standard-class, class,
     specializer, metaobject, standard-object, t'

     Slots:
        * 'schema-name' -- type: '(or null string symbol)'; initarg:
          ':schema-name'; reader: 'schemata::schema-name'; writer:
          '(setf schemata::schema-name)'

 -- Class: SCHEMATA:SCHEMA-OBJECT

     Class precedence list: 'schema-object, standard-object, t'

 -- Class: SCHEMATA:TYPE-SCHEMA

     Schema for a Common Lisp type.

     Syntax: (schema type)

     Examples:

     (schema string) (schema integer)

     Class precedence list: 'type-schema, schema, standard-object, t'

     Slots:
        * 'type' -- type: 't'; initarg: ':type'; reader:
          'schemata:schema-type'; writer: '(setf schemata:schema-type)'

 -- Class: SCHEMATA:ATTRIBUTE-PROPERTIES

     Class precedence list: 'attribute-properties, standard-object, t'

     Slots:
        * 'required' -- type: 'boolean'; initarg: ':required'; reader:
          'schemata:attribute-required-p'; writer:
          '(setf schemata:attribute-required-p)'

        * 'required-message' -- type: '(or string null)'; initarg:
          ':required-message'; reader:
          'schemata::attribute-required-message'; writer:
          '(setf schemata::attribute-required-message)'

        * 'default' -- type: 't'; initarg: ':default'; reader:
          'schemata::attribute-default'; writer:
          '(setf schemata::attribute-default)'

        * 'validator' -- type:
          '(or null                                               trivial-types:function-designator)';
          initarg: ':validator'; reader: 'schemata:attribute-validator';
          writer: '(setf schemata:attribute-validator)'

        * 'add-validator' -- type:
          '(or null                                                   trivial-types:function-designator)';
          initarg: ':add-validator'; reader:
          'schemata:attribute-add-validator'; writer:
          '(setf schemata:attribute-add-validator)'

        * 'parser' -- type:
          '(or null                                            trivial-types:function-designator)';
          initarg: ':parser'; reader: 'schemata:attribute-parser';
          writer: '(setf schemata:attribute-parser)'

        * 'formatter' -- type:
          '(or null                                               trivial-types:function-designator)';
          initarg: ':formatter'; reader: 'schemata:attribute-formatter';
          writer: '(setf schemata:attribute-formatter)'

        * 'external-name' -- type: '(or string null)'; initarg:
          ':external-name'; reader: 'schemata:attribute-external-name';
          writer: '(setf schemata:attribute-external-name)'

        * 'serializer' -- type: 't'; initarg: ':serializer'; reader:
          'schemata::attribute-serializer'; writer:
          '(setf schemata::attribute-serializer)'

        * 'unserializer' -- type:
          '(or null                                                  trivial-types:function-designator)';
          initarg: ':unserializer'; reader:
          'schemata::attribute-unserializer'; writer:
          '(setf schemata::attribute-unserializer)'

 -- Class: SCHEMATA:VALIDATION-ERROR

     Class precedence list: 'validation-error, error, serious-condition,
     condition, t'

 -- Class: SCHEMATA:ATTRIBUTE

     Class precedence list: 'attribute, schema, attribute-properties,
     standard-object, t'

     Slots:
        * 'name' -- type: 'symbol'; initarg: ':name'; reader:
          'schemata:attribute-name'; writer:
          '(setf schemata:attribute-name)'

        * 'type' -- type: 'schemata:schema'; initarg: ':type'; reader:
          'schemata:attribute-type'; writer:
          '(setf schemata:attribute-type)'

        * 'accessor' -- type: '(or null symbol)'; initarg: ':accessor';
          reader: 'schemata:attribute-accessor'; writer:
          '(setf schemata:attribute-accessor)'

        * 'writer' -- type:
          '(or null                                            trivial-types:function-designator)';
          initarg: ':writer'

        * 'reader' -- type:
          '(or null                                            trivial-types:function-designator)';
          initarg: ':reader'

        * 'slot' -- type: '(or null symbol)'; initarg: ':slot'; reader:
          'schemata::attribute-slot'; writer:
          '(setf schemata::attribute-slot)'


File: schemata.info,  Node: Index,  Prev: Reference,  Up: Top

9 Index
*******

 [index ]
* Menu:

* schemata:                              Top.                   (line 6)

 [index ]
* Menu:

* SCHEMATA:ATTRIBUTE-ACCESSOR:           SCHEMATA package.    (line  41)
* SCHEMATA:ATTRIBUTE-ACCESSOR <1>:       SCHEMATA package.    (line  41)
* SCHEMATA:ATTRIBUTE-ADD-VALIDATOR:      SCHEMATA package.    (line  43)
* SCHEMATA:ATTRIBUTE-ADD-VALIDATOR <1>:  SCHEMATA package.    (line  43)
* SCHEMATA:ATTRIBUTE-EXTERNAL-NAME:      SCHEMATA package.    (line  45)
* SCHEMATA:ATTRIBUTE-EXTERNAL-NAME <1>:  SCHEMATA package.    (line  45)
* SCHEMATA:ATTRIBUTE-FORMATTER:          SCHEMATA package.    (line  50)
* SCHEMATA:ATTRIBUTE-FORMATTER <1>:      SCHEMATA package.    (line  50)
* SCHEMATA:ATTRIBUTE-NAME:               SCHEMATA package.    (line  62)
* SCHEMATA:ATTRIBUTE-NAME <1>:           SCHEMATA package.    (line  62)
* SCHEMATA:ATTRIBUTE-OPTIONAL-P:         SCHEMATA package.    (line  81)
* SCHEMATA:ATTRIBUTE-OPTIONAL-P <1>:     SCHEMATA package.    (line  81)
* SCHEMATA:ATTRIBUTE-PARSER:             SCHEMATA package.    (line  64)
* SCHEMATA:ATTRIBUTE-PARSER <1>:         SCHEMATA package.    (line  64)
* SCHEMATA:ATTRIBUTE-READER:             SCHEMATA package.    (line  73)
* SCHEMATA:ATTRIBUTE-READER <1>:         SCHEMATA package.    (line  73)
* SCHEMATA:ATTRIBUTE-REQUIRED-P:         SCHEMATA package.    (line  39)
* SCHEMATA:ATTRIBUTE-REQUIRED-P <1>:     SCHEMATA package.    (line  39)
* SCHEMATA:ATTRIBUTE-TYPE:               SCHEMATA package.    (line  58)
* SCHEMATA:ATTRIBUTE-TYPE <1>:           SCHEMATA package.    (line  58)
* SCHEMATA:ATTRIBUTE-TYPE-NAME:          SCHEMATA package.    (line  71)
* SCHEMATA:ATTRIBUTE-TYPE-NAME <1>:      SCHEMATA package.    (line  71)
* SCHEMATA:ATTRIBUTE-VALIDATOR:          SCHEMATA package.    (line  66)
* SCHEMATA:ATTRIBUTE-VALIDATOR <1>:      SCHEMATA package.    (line  66)
* SCHEMATA:ATTRIBUTE-WRITER:             SCHEMATA package.    (line 103)
* SCHEMATA:ATTRIBUTE-WRITER <1>:         SCHEMATA package.    (line 103)
* SCHEMATA:DEF-SCHEMA-CLASS:             SCHEMATA package.    (line  23)
* SCHEMATA:DEF-SCHEMA-CLASS <1>:         SCHEMATA package.    (line  23)
* SCHEMATA:DEFSCHEMA:                    SCHEMATA package.    (line  18)
* SCHEMATA:DEFSCHEMA <1>:                SCHEMATA package.    (line  18)
* SCHEMATA:FIND-OBJECT-ATTRIBUTE:        SCHEMATA package.    (line  93)
* SCHEMATA:FIND-OBJECT-ATTRIBUTE <1>:    SCHEMATA package.    (line  93)
* SCHEMATA:FIND-SCHEMA:                  SCHEMATA package.    (line 107)
* SCHEMATA:FIND-SCHEMA <1>:              SCHEMATA package.    (line 107)
* SCHEMATA:GENERATE-SCHEMA-FROM-CLASS:   SCHEMATA package.    (line 128)
* SCHEMATA:GENERATE-SCHEMA-FROM-CLASS <1>: SCHEMATA package.  (line 128)
* SCHEMATA:OBJECT-ATTRIBUTES:            SCHEMATA package.    (line  60)
* SCHEMATA:OBJECT-ATTRIBUTES <1>:        SCHEMATA package.    (line  60)
* SCHEMATA:OBJECT-CLASS:                 SCHEMATA package.    (line  35)
* SCHEMATA:OBJECT-CLASS <1>:             SCHEMATA package.    (line  35)
* SCHEMATA:OBJECT-NAME:                  SCHEMATA package.    (line  33)
* SCHEMATA:OBJECT-NAME <1>:              SCHEMATA package.    (line  33)
* SCHEMATA:PARSE-WITH-SCHEMA:            SCHEMATA package.    (line  54)
* SCHEMATA:PARSE-WITH-SCHEMA <1>:        SCHEMATA package.    (line  54)
* SCHEMATA:PATCH-WITH-SCHEMA:            SCHEMATA package.    (line  96)
* SCHEMATA:PATCH-WITH-SCHEMA <1>:        SCHEMATA package.    (line  96)
* SCHEMATA:POPULATE-WITH-SCHEMA:         SCHEMATA package.    (line  75)
* SCHEMATA:POPULATE-WITH-SCHEMA <1>:     SCHEMATA package.    (line  75)
* SCHEMATA:SCHEMA:                       SCHEMATA package.    (line  14)
* SCHEMATA:SCHEMA <1>:                   SCHEMATA package.    (line  14)
* SCHEMATA:SCHEMA-CLASS-SCHEMA:          SCHEMATA package.    (line  83)
* SCHEMATA:SCHEMA-CLASS-SCHEMA <1>:      SCHEMATA package.    (line  83)
* SCHEMATA:SCHEMA-DOCUMENTATION:         SCHEMATA package.    (line  52)
* SCHEMATA:SCHEMA-DOCUMENTATION <1>:     SCHEMATA package.    (line  52)
* SCHEMATA:SCHEMA-GENERATOR:             SCHEMATA package.    (line  37)
* SCHEMATA:SCHEMA-GENERATOR <1>:         SCHEMATA package.    (line  37)
* SCHEMATA:SCHEMA-SPEC:                  SCHEMATA package.    (line  91)
* SCHEMATA:SCHEMA-SPEC <1>:              SCHEMATA package.    (line  91)
* SCHEMATA:SCHEMA-TYPE:                  SCHEMATA package.    (line  31)
* SCHEMATA:SCHEMA-TYPE <1>:              SCHEMATA package.    (line  31)
* SCHEMATA:SERIALIZE-WITH-SCHEMA:        SCHEMATA package.    (line  87)
* SCHEMATA:SERIALIZE-WITH-SCHEMA <1>:    SCHEMATA package.    (line  87)
* SCHEMATA:UNSERIALIZE-WITH-SCHEMA:      SCHEMATA package.    (line  47)
* SCHEMATA:UNSERIALIZE-WITH-SCHEMA <1>:  SCHEMATA package.    (line  47)
* SCHEMATA:VALIDATE-WITH-SCHEMA:         SCHEMATA package.    (line 111)
* SCHEMATA:VALIDATE-WITH-SCHEMA <1>:     SCHEMATA package.    (line 111)
* SCHEMATA:VALIDATION-ERROR:             SCHEMATA package.    (line 105)
* SCHEMATA:VALIDATION-ERROR <1>:         SCHEMATA package.    (line 105)



Tag Table:
Node: Top267
Node: Intro445
Ref: introduction556
Node: Installation1035
Ref: installation1148
Node: Usage1197
Ref: usage1303
Node: Schema types4381
Node: Data generation10121
Node: Reference11079
Ref: reference11193
Node: SCHEMATA package11224
Ref: SCHEMATA:SCHEMA macro11412
Ref: SCHEMATA:DEFSCHEMA macro11497
Ref: SCHEMATA:DEF-SCHEMA-CLASS macro11630
Ref: SCHEMATA:SCHEMA-TYPE function11813
Ref: SCHEMATA:OBJECT-NAME function11874
Ref: SCHEMATA:OBJECT-CLASS function11935
Ref: SCHEMATA:SCHEMA-GENERATOR function11997
Ref: SCHEMATA:ATTRIBUTE-REQUIRED-P function12063
Ref: SCHEMATA:ATTRIBUTE-ACCESSOR function12133
Ref: SCHEMATA:ATTRIBUTE-ADD-VALIDATOR function12201
Ref: SCHEMATA:ATTRIBUTE-EXTERNAL-NAME function12274
Ref: SCHEMATA:UNSERIALIZE-WITH-SCHEMA function12347
Ref: SCHEMATA:ATTRIBUTE-FORMATTER function12434
Ref: SCHEMATA:SCHEMA-DOCUMENTATION function12503
Ref: SCHEMATA:PARSE-WITH-SCHEMA function12573
Ref: SCHEMATA:ATTRIBUTE-TYPE function12711
Ref: SCHEMATA:OBJECT-ATTRIBUTES function12775
Ref: SCHEMATA:ATTRIBUTE-NAME function12842
Ref: SCHEMATA:ATTRIBUTE-PARSER function12906
Ref: SCHEMATA:ATTRIBUTE-VALIDATOR function12972
Ref: SCHEMATA:ATTRIBUTE-TYPE-NAME function13062
Ref: SCHEMATA:ATTRIBUTE-READER function13118
Ref: SCHEMATA:POPULATE-WITH-SCHEMA function13171
Ref: SCHEMATA:ATTRIBUTE-OPTIONAL-P function13373
Ref: SCHEMATA:SCHEMA-CLASS-SCHEMA function13430
Ref: SCHEMATA:SERIALIZE-WITH-SCHEMA function13546
Ref: SCHEMATA:SCHEMA-SPEC function13732
Ref: SCHEMATA:FIND-OBJECT-ATTRIBUTE function13777
Ref: SCHEMATA:PATCH-WITH-SCHEMA function13874
Ref: SCHEMATA:ATTRIBUTE-WRITER function14155
Ref: SCHEMATA:VALIDATION-ERROR function14208
Ref: SCHEMATA:FIND-SCHEMA function14270
Ref: SCHEMATA:VALIDATE-WITH-SCHEMA function14373
Ref: SCHEMATA:GENERATE-SCHEMA-FROM-CLASS function15214
Ref: SCHEMATA:OBJECT-SCHEMA class15344
Ref: SCHEMATA:CONS-SCHEMA class16759
Ref: SCHEMATA:LIST-OF-SCHEMA class17338
Ref: SCHEMATA:PLIST-OF-SCHEMA class17864
Ref: SCHEMATA:SCHEMA class18471
Ref: SCHEMATA:ALIST-OF-SCHEMA class18920
Ref: SCHEMATA:PLIST-SCHEMA class19540
Ref: SCHEMATA:LIST-SCHEMA class20697
Ref: SCHEMATA:SCHEMA-REFERENCE-SCHEMA class21311
Ref: SCHEMATA:ALIST-SCHEMA class21610
Ref: SCHEMATA:SCHEMA-CLASS class23387
Ref: SCHEMATA:SCHEMA-OBJECT class23763
Ref: SCHEMATA:TYPE-SCHEMA class23863
Ref: SCHEMATA:ATTRIBUTE-PROPERTIES class24229
Ref: SCHEMATA:VALIDATION-ERROR class26639
Ref: SCHEMATA:ATTRIBUTE class26770
Node: Index27876

End Tag Table
