This is schemata.info, produced by makeinfo version 6.7 from
schemata.texi.

Copyright (C) 2021 Mariano Montone

INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* schemata: (schemata) Schema validation and serialization library for Common Lisp.
END-INFO-DIR-ENTRY


File: schemata.info,  Node: Top,  Next: Intro,  Up: (dir)

Top
***

* Menu:

* Intro::
* Installation::
* Usage::
* Schema types::
* Reference::
* Index::


File: schemata.info,  Node: Intro,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

Generic purpose schema library for serialization and validation of data.

   This library is used by CL-REST-SERVER for API serialization and
validation.

   It features:

   * Validation using schemas.
   * Serialization and unserialization using schemas.
   * Generation of (random) data from schemas.  (incomplete
     implementation atm)
   * JSON-Schema parsing (incomplete implementation atm).
   * Integration with Common Lisp type system.
   * A schema class metaclass.


File: schemata.info,  Node: Installation,  Next: Usage,  Prev: Intro,  Up: Top

2 Installation
**************

With Quicklisp:

     (ql:quickload "schemata")


File: schemata.info,  Node: Usage,  Next: Schema types,  Prev: Installation,  Up: Top

3 Usage
*******

3.1 Schema definition
=====================

Use *note DEFSCHEMA: SCHEMATA:DEFSCHEMA macro.for defining schemas.

   Schema example:

     (schemata:defschema customer
         (object "customer"
                  ((id string :external-name "id" :accessor
                       customer-id :documentation "customer id")
                   (number string :external-name "number" :required nil
                                   :accessor customer-nr :documentation
                           "customer number")
                   (name string :external-name "name" :accessor
                         customer-name :documentation "customer name")
                   (address-1 string :external-name "address1"
                                      :required nil :documentation
                              "customer first address")
                   (address-2 string :external-name "address2"
                                      :required nil :documentation
                              "customer second address")
                   (postal-code string :external-name "postalcode"
                                        :required nil :documentation
                                "postal code")
                   (postal-area string :external-name "postalarea"
                                        :required nil :documentation
                                "postal area")
                   (country string :external-name "country" :required nil
                            :documentation "country code")
                   (phone string :external-name "phone" :required nil
                                  :documentation "phone")
                   (fax string :external-name "fax" :required nil
                                :documentation "fax")
                   (email string :external-name "email" :required nil
                                  :documentation "email"))
                  (:documentation "customer data fetched")))

3.2 Validation using schemas
============================

Use *note VALIDATE-WITH-SCHEMA: SCHEMATA:VALIDATE-WITH-SCHEMA function.

3.3 Serialization using schemas
===============================

Via _generic-serializer_ library.

   Use *note SERIALIZE-WITH-SCHEMA: SCHEMATA:SERIALIZE-WITH-SCHEMA
function.

     (with-output-to-string (s)
         (gs:with-serializer-output s
             (gs:with-serializer :json
                (serialize-with-schema *schema* user))))

     (with-output-to-string (s)
       (gs:with-serializer-output s
         (gs:with-serializer :json
           (serialize-with-schema
            (find-schema 'user-schema) *user*))))

3.4 Unserialization using schemas
=================================

Use *note UNSERIALIZE-WITH-SCHEMA: SCHEMATA:UNSERIALIZE-WITH-SCHEMA
function.

     (unserialize-with-schema
        (find-schema 'user-schema)
        (json:decode-json-from-string data)
        :json)

3.5 Patch and updates
=====================

See *note PATCH-WITH-SCHEMA: SCHEMATA:PATCH-WITH-SCHEMA function.and
*note POPULATE-WITH-SCHEMA: SCHEMATA:POPULATE-WITH-SCHEMA function.


File: schemata.info,  Node: Schema types,  Next: Reference,  Prev: Usage,  Up: Top

4 Schema types
**************

4.1 Type schemas
================

Schemas can be built from Common Lisp types:

SCHEMATA> (defparameter *s* (schema string))
*S*
SCHEMATA> *s*
#<TYPE-SCHEMA STRING {1006FBBD13}>
SCHEMATA> (validate-with-schema *s* "22")
NIL
SCHEMATA> (validate-with-schema *s* 22 :error-p nil)
#<VALIDATION-ERROR "~s is not of type: ~a" {100152EB13}>

4.2 Object schema
=================

Object schemas are built using the syntax: '(object name attributes
options)'.  Attributes are specified as: '(attribute-name attribute-type
&rest options)'.

   The 'attribute-type' is parsed as a schema.

   Possible attribute options are: 'required', 'required-message',
'default', 'accessor', 'writer', 'reader', 'parser', 'validator',
'add-validator', 'formatter', 'external-name', 'serializer',
'unserializer', 'slot'.

   Example:

SCHEMATA> (schema (object person
                          ((name string)
                           (age integer :required nil))))
#<OBJECT-SCHEMA {1001843543}>

4.3 List schema
===============

Homogeneous list of schemas are specified via 'list-of'.

   Example:

SCHEMATA> (defparameter *s* (schema (list-of integer)))
*S*
SCHEMATA> (validate-with-schema *s* '(1 2 "foo"))
; Evaluation aborted on #<SCHEMATA:VALIDATION-ERROR "~s is not of type: ~a" {1006ECA323}>.
SCHEMATA> (validate-with-schema *s* '(1 2 3))
NIL

4.4 Schema references
=====================

Defined schemas can be referenced via either '(schema schema-name)' or
'(ref schema-name)' (they are identical).

   Example:

SCHEMATA> (defschema person
            (object person
                    ((name string))))
#<OBJECT-SCHEMA {1006F8A813}>
SCHEMATA> (defparameter *list-of-person* (schema (list-of (ref person))))
*LIST-OF-PERSON*
SCHEMATA> *list-of-person*
#<LIST-SCHEMA {1006F8C2A3}>
SCHEMATA> (parse-with-schema *list-of-person* '((("name" . "Mariano")) (("name" . "Peter"))))
(((NAME . "Mariano")) ((NAME . "Peter")))
SCHEMATA> (validate-with-schema *list-of-person* '((("name" . 22)) (("name" . "Peter"))))
; processing (DEFMETHOD SCHEMA-VALIDATE ...); Evaluation aborted on #<SB-PCL::NO-APPLICABLE-METHOD-ERROR {1008018513}>.
SCHEMATA> (validate-with-schema *list-of-person* '((("name" . 22)) (("name" . "Peter"))))
; Evaluation aborted on #<SCHEMATA:VALIDATION-ERROR "~s is not of type: ~a" {10082EB883}>.
SCHEMATA> (validate-with-schema *list-of-person* '((("name" . "Mariano")) (("name" . "Peter"))))
NIL
SCHEMATA> (validate-with-schema *list-of-person* '((("names" . "Mariano")) (("name" . "Peter"))))
; Evaluation aborted on #<SCHEMATA:VALIDATION-ERROR "Attributes not part of schema: ~a" {1008CD3DD3}>.

4.5 SATISFIES-SCHEMA type
=========================

Schemata integrates with the Lisp type system via the SATISFIES-SCHEMA
type.  Schemas can be thought as types over data.  Defined schemas can
be checked using TYPEP and CHECK-TYPE with the type '(satisfies-schema
schema-name)'.

   Example:

SCHEMATA> (defschema string-schema string)
#<TYPE-SCHEMA STRING {10019DA8B3}>
SCHEMATA> (typep "foo" '(satisfies-schema string-schema))
T
SCHEMATA> (typep 22 '(satisfies-schema string-schema))
NIL
SCHEMATA> (let ((x "foo"))
            (check-type x (satisfies-schema string-schema))
            x)
"foo"

4.6 SCHEMA-CLASS metaclass
==========================

SCHEMA-CLASS classes get an schema attached.

   Example:

SCHEMATA> (def-schema-class person ()
            ((name :type string :initarg :name)
             (age :type integer :required nil :initarg :age)))
#<SCHEMA-CLASS SCHEMATA::PERSON>

SCHEMATA> (validate-with-schema (find-class 'person) '(("name" . "Mariano") ("age" . 22)))
NIL

SCHEMATA> (validate-with-schema (find-class 'person) '(("name" . "Mariano") ("age" . 'asdf)) :error-p nil)
#<VALIDATION-ERROR 'ASDF is not of type: INTEGER {100109F833}>

SCHEMATA> (generic-serializer:with-serializer :json
            (generic-serializer:serialize (make-instance 'person :name "Mariano" :age 44)))
{"name":"Mariano","age":44}


File: schemata.info,  Node: Reference,  Next: Index,  Prev: Schema types,  Up: Top

5 Reference
***********

* Menu:

* SCHEMATA package::


File: schemata.info,  Node: SCHEMATA package,  Up: Reference

5.1 SCHEMATA package
====================

 -- PACKAGE: SCHEMATA

External definitions
====================

Macros
------

 -- Macro: SCHEMATA:DEFSCHEMA (name schema)

     Register SCHEMA under NAME. The schema can then be accessed via
     FIND-SCHEMA.

 -- Macro: SCHEMATA:DEF-SCHEMA-CLASS (name direct-superclasses
          direct-slots &rest options)

     Helper macro to define schema classes

 -- Macro: SCHEMATA:SCHEMA (schema-def)

     Wrapper macro for schema definitions.

Generic functions
-----------------

 -- Generic-Function: SCHEMATA:PARSE-WITH-SCHEMA (schema string-or-data)

     Parses the string to an association list using the schema

 -- Generic-Function: SCHEMATA:ATTRIBUTE-NAME (sb-pcl::object)

 -- Generic-Function: SCHEMATA:UNSERIALIZE-WITH-SCHEMA (schema data
          format)

 -- Generic-Function: SCHEMATA:SCHEMA-DOCUMENTATION (sb-pcl::object)

 -- Generic-Function: SCHEMATA:OBJECT-CLASS (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-PARSER (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-VALIDATOR (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-ADD-VALIDATOR (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-EXTERNAL-NAME (sb-pcl::object)

 -- Generic-Function: SCHEMATA:SCHEMA-TYPE (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-FORMATTER (sb-pcl::object)

 -- Generic-Function: SCHEMATA:OBJECT-NAME (sb-pcl::object)

 -- Generic-Function: SCHEMATA:OBJECT-ATTRIBUTES (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-ACCESSOR (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-TYPE (sb-pcl::object)

 -- Generic-Function: SCHEMATA:ATTRIBUTE-REQUIRED-P (sb-pcl::object)

Functions
---------

 -- Function: SCHEMATA:ATTRIBUTE-READER (attribute)

 -- Function: SCHEMATA:FIND-OBJECT-ATTRIBUTE (object attribute-name &key
          (error-p t))

 -- Function: SCHEMATA:POPULATE-WITH-SCHEMA (schema object data &key
          exclude)

     Populate CLOS objects from data + schema.  Attributes members of
     EXCLUDE parameter are not populated.

 -- Function: SCHEMATA:SCHEMA-CLASS-SCHEMA (schema-class)

     Generate a schema using the schema class meta info

 -- Function: SCHEMATA:SERIALIZE-WITH-SCHEMA (schema input &optional
          (serializer generic-serializer::*serializer*) (stream
          generic-serializer::*serializer-output*))

 -- Function: SCHEMATA:SCHEMA-SPEC (schema)

 -- Function: SCHEMATA:ATTRIBUTE-TYPE-NAME (attribute)

 -- Function: SCHEMATA:VALIDATION-ERROR (message &rest args)

 -- Function: SCHEMATA:VALIDATE-WITH-SCHEMA (schema data &key
          (collect-errors *collect-validation-errors*) (error-p
          *signal-validation-errors*))

     Validate input using schema.  Useful for validating resource
     operations posted content (for :post and :put methods).  Input can
     be a string or an association list.

     Args: - schema (symbol or schema): The schema - data (alist): The
     data to validate.  - format (keyword): The data format.  -
     collect-errors (boolean): If true, collect all the validation
     errors.  If false, return the first validation error found.
     Default: true.  - error-p (boolean): If true, when validation
     errors are found, a validation error is signaled.  If false, the
     validation errors are returned as the function result and no error
     is signaled.

 -- Function: SCHEMATA:ATTRIBUTE-OPTIONAL-P (attribute)

 -- Function: SCHEMATA:ATTRIBUTE-WRITER (attribute)

 -- Function: SCHEMATA:FIND-SCHEMA (name &optional (errorp t))

     Find a schema definition by name

 -- Function: SCHEMATA:PATCH-WITH-SCHEMA (schema object data)

     Populate CLOS objects from data + schema.  Only populates
     attributes available in DATA, validating them.  Useful for PATCH
     rest api operations implementations.  DATA should be an association
     list.

Classes
-------

 -- Class: SCHEMATA:OBJECT-SCHEMA

     Class precedence list: 'object-schema, schema, standard-object, t'

     Slots:
        * 'name' -- type: '(or string symbol)'; initarg: ':name';
          reader: 'schemata:object-name'; writer:
          '(setf schemata:object-name)'

          The name of the object.
        * 'attributes' -- type: 'list'; initarg: ':attributes'; reader:
          'schemata:object-attributes'; writer:
          '(setf schemata:object-attributes)'

        * 'class' -- type: '(or null symbol)'; initarg: ':class';
          reader: 'schemata:object-class'; writer:
          '(setf schemata:object-class)'

        * 'ignore-unknown-attributes' -- type: 'boolean'; initarg:
          ':ignore-unknown-attributes'; reader:
          'schemata::ignore-unknown-attributes'; writer:
          '(setf schemata::ignore-unknown-attributes)'

        * 'serializer' -- type:
          '(or null                                                trivial-types:function-designator)';
          initarg: ':serializer'; reader: 'schemata::object-serializer';
          writer: '(setf schemata::object-serializer)'

        * 'unserializer' -- type:
          '(or null                                                  trivial-types:function-designator)';
          initarg: ':unserializer'; reader:
          'schemata::object-unserializer'; writer:
          '(setf schemata::object-unserializer)'

 -- Class: SCHEMATA:SCHEMA-REFERENCE-SCHEMA

     Class precedence list: 'schema-reference-schema, schema,
     standard-object, t'

     Slots:
        * 'name' -- type: 'symbol'; initarg: ':schema-name'; reader:
          'schemata::schema-name'; writer:
          '(setf schemata::schema-name)'

 -- Class: SCHEMATA:LIST-SCHEMA

     Class precedence list: 'list-schema, schema, standard-object, t'

     Slots:
        * 'elements-schema' -- type: '(not null)'; initarg:
          ':elements-schema'; reader: 'schemata::elements-schema';
          writer: '(setf schemata::elements-schema)'

          Schema of the elements of the list

 -- Class: SCHEMATA:VALIDATION-ERROR

     Class precedence list: 'validation-error, error, serious-condition,
     condition, t'

 -- Class: SCHEMATA:ATTRIBUTE

     Class precedence list: 'attribute, schema, attribute-properties,
     standard-object, t'

     Slots:
        * 'name' -- type: 'symbol'; initarg: ':name'; reader:
          'schemata:attribute-name'; writer:
          '(setf schemata:attribute-name)'

        * 'type' -- type: 'schemata:schema'; initarg: ':type'; reader:
          'schemata:attribute-type'; writer:
          '(setf schemata:attribute-type)'

        * 'accessor' -- type: '(or null symbol)'; initarg: ':accessor';
          reader: 'schemata:attribute-accessor'; writer:
          '(setf schemata:attribute-accessor)'

        * 'writer' -- type:
          '(or null                                            trivial-types:function-designator)';
          initarg: ':writer'

        * 'reader' -- type:
          '(or null                                            trivial-types:function-designator)';
          initarg: ':reader'

        * 'slot' -- type: '(or null symbol)'; initarg: ':slot'; reader:
          'schemata::attribute-slot'; writer:
          '(setf schemata::attribute-slot)'

 -- Class: SCHEMATA:TYPE-SCHEMA

     Class precedence list: 'type-schema, schema, standard-object, t'

     Slots:
        * 'type' -- type: 't'; initarg: ':type'; reader:
          'schemata:schema-type'; writer: '(setf schemata:schema-type)'

 -- Class: SCHEMATA:SCHEMA

     Class precedence list: 'schema, standard-object, t'

     Slots:
        * 'documentation' -- type: '(or null string)'; initarg:
          ':documentation'; reader: 'schemata:schema-documentation';
          writer: '(setf schemata:schema-documentation)'

        * 'generator' -- type: 't'; initarg: ':generator'; reader:
          'schemata::schema-generator'; writer:
          '(setf schemata::schema-generator)'

 -- Class: SCHEMATA:SCHEMA-OBJECT

     Class precedence list: 'schema-object, standard-object, t'

 -- Class: SCHEMATA:SCHEMA-CLASS

     Metaclass for schema objects

     Class precedence list: 'schema-class, standard-class, class,
     specializer, metaobject, standard-object, t'

     Slots:
        * 'schema-name' -- type: '(or null string symbol)'; initarg:
          ':schema-name'; reader: 'schemata::schema-name'; writer:
          '(setf schemata::schema-name)'


File: schemata.info,  Node: Index,  Prev: Reference,  Up: Top

6 Index
*******

 [index ]
* Menu:

* schemata:                              Top.                   (line 6)

 [index ]
* Menu:

* SCHEMATA:ATTRIBUTE-ACCESSOR:           SCHEMATA package.    (line  60)
* SCHEMATA:ATTRIBUTE-ACCESSOR <1>:       SCHEMATA package.    (line  60)
* SCHEMATA:ATTRIBUTE-ADD-VALIDATOR:      SCHEMATA package.    (line  48)
* SCHEMATA:ATTRIBUTE-ADD-VALIDATOR <1>:  SCHEMATA package.    (line  48)
* SCHEMATA:ATTRIBUTE-EXTERNAL-NAME:      SCHEMATA package.    (line  50)
* SCHEMATA:ATTRIBUTE-EXTERNAL-NAME <1>:  SCHEMATA package.    (line  50)
* SCHEMATA:ATTRIBUTE-FORMATTER:          SCHEMATA package.    (line  54)
* SCHEMATA:ATTRIBUTE-FORMATTER <1>:      SCHEMATA package.    (line  54)
* SCHEMATA:ATTRIBUTE-NAME:               SCHEMATA package.    (line  35)
* SCHEMATA:ATTRIBUTE-NAME <1>:           SCHEMATA package.    (line  35)
* SCHEMATA:ATTRIBUTE-OPTIONAL-P:         SCHEMATA package.    (line 111)
* SCHEMATA:ATTRIBUTE-OPTIONAL-P <1>:     SCHEMATA package.    (line 111)
* SCHEMATA:ATTRIBUTE-PARSER:             SCHEMATA package.    (line  44)
* SCHEMATA:ATTRIBUTE-PARSER <1>:         SCHEMATA package.    (line  44)
* SCHEMATA:ATTRIBUTE-READER:             SCHEMATA package.    (line  69)
* SCHEMATA:ATTRIBUTE-READER <1>:         SCHEMATA package.    (line  69)
* SCHEMATA:ATTRIBUTE-REQUIRED-P:         SCHEMATA package.    (line  64)
* SCHEMATA:ATTRIBUTE-REQUIRED-P <1>:     SCHEMATA package.    (line  64)
* SCHEMATA:ATTRIBUTE-TYPE:               SCHEMATA package.    (line  62)
* SCHEMATA:ATTRIBUTE-TYPE <1>:           SCHEMATA package.    (line  62)
* SCHEMATA:ATTRIBUTE-TYPE-NAME:          SCHEMATA package.    (line  90)
* SCHEMATA:ATTRIBUTE-TYPE-NAME <1>:      SCHEMATA package.    (line  90)
* SCHEMATA:ATTRIBUTE-VALIDATOR:          SCHEMATA package.    (line  46)
* SCHEMATA:ATTRIBUTE-VALIDATOR <1>:      SCHEMATA package.    (line  46)
* SCHEMATA:ATTRIBUTE-WRITER:             SCHEMATA package.    (line 113)
* SCHEMATA:ATTRIBUTE-WRITER <1>:         SCHEMATA package.    (line 113)
* SCHEMATA:DEF-SCHEMA-CLASS:             SCHEMATA package.    (line  19)
* SCHEMATA:DEF-SCHEMA-CLASS <1>:         SCHEMATA package.    (line  19)
* SCHEMATA:DEFSCHEMA:                    SCHEMATA package.    (line  14)
* SCHEMATA:DEFSCHEMA <1>:                SCHEMATA package.    (line  14)
* SCHEMATA:FIND-OBJECT-ATTRIBUTE:        SCHEMATA package.    (line  71)
* SCHEMATA:FIND-OBJECT-ATTRIBUTE <1>:    SCHEMATA package.    (line  71)
* SCHEMATA:FIND-SCHEMA:                  SCHEMATA package.    (line 115)
* SCHEMATA:FIND-SCHEMA <1>:              SCHEMATA package.    (line 115)
* SCHEMATA:OBJECT-ATTRIBUTES:            SCHEMATA package.    (line  58)
* SCHEMATA:OBJECT-ATTRIBUTES <1>:        SCHEMATA package.    (line  58)
* SCHEMATA:OBJECT-CLASS:                 SCHEMATA package.    (line  42)
* SCHEMATA:OBJECT-CLASS <1>:             SCHEMATA package.    (line  42)
* SCHEMATA:OBJECT-NAME:                  SCHEMATA package.    (line  56)
* SCHEMATA:OBJECT-NAME <1>:              SCHEMATA package.    (line  56)
* SCHEMATA:PARSE-WITH-SCHEMA:            SCHEMATA package.    (line  31)
* SCHEMATA:PARSE-WITH-SCHEMA <1>:        SCHEMATA package.    (line  31)
* SCHEMATA:PATCH-WITH-SCHEMA:            SCHEMATA package.    (line 119)
* SCHEMATA:PATCH-WITH-SCHEMA <1>:        SCHEMATA package.    (line 119)
* SCHEMATA:POPULATE-WITH-SCHEMA:         SCHEMATA package.    (line  74)
* SCHEMATA:POPULATE-WITH-SCHEMA <1>:     SCHEMATA package.    (line  74)
* SCHEMATA:SCHEMA:                       SCHEMATA package.    (line  24)
* SCHEMATA:SCHEMA <1>:                   SCHEMATA package.    (line  24)
* SCHEMATA:SCHEMA-CLASS-SCHEMA:          SCHEMATA package.    (line  80)
* SCHEMATA:SCHEMA-CLASS-SCHEMA <1>:      SCHEMATA package.    (line  80)
* SCHEMATA:SCHEMA-DOCUMENTATION:         SCHEMATA package.    (line  40)
* SCHEMATA:SCHEMA-DOCUMENTATION <1>:     SCHEMATA package.    (line  40)
* SCHEMATA:SCHEMA-SPEC:                  SCHEMATA package.    (line  88)
* SCHEMATA:SCHEMA-SPEC <1>:              SCHEMATA package.    (line  88)
* SCHEMATA:SCHEMA-TYPE:                  SCHEMATA package.    (line  52)
* SCHEMATA:SCHEMA-TYPE <1>:              SCHEMATA package.    (line  52)
* SCHEMATA:SERIALIZE-WITH-SCHEMA:        SCHEMATA package.    (line  84)
* SCHEMATA:SERIALIZE-WITH-SCHEMA <1>:    SCHEMATA package.    (line  84)
* SCHEMATA:UNSERIALIZE-WITH-SCHEMA:      SCHEMATA package.    (line  37)
* SCHEMATA:UNSERIALIZE-WITH-SCHEMA <1>:  SCHEMATA package.    (line  37)
* SCHEMATA:VALIDATE-WITH-SCHEMA:         SCHEMATA package.    (line  94)
* SCHEMATA:VALIDATE-WITH-SCHEMA <1>:     SCHEMATA package.    (line  94)
* SCHEMATA:VALIDATION-ERROR:             SCHEMATA package.    (line  92)
* SCHEMATA:VALIDATION-ERROR <1>:         SCHEMATA package.    (line  92)



Tag Table:
Node: Top267
Node: Intro425
Ref: introduction536
Node: Installation1015
Ref: installation1128
Node: Usage1177
Ref: usage1283
Node: Schema types4361
Node: Reference8418
Ref: reference8529
Node: SCHEMATA package8560
Ref: SCHEMATA:DEFSCHEMA macro8748
Ref: SCHEMATA:DEF-SCHEMA-CLASS macro8881
Ref: SCHEMATA:SCHEMA macro9027
Ref: SCHEMATA:PARSE-WITH-SCHEMA function9149
Ref: SCHEMATA:ATTRIBUTE-NAME function9287
Ref: SCHEMATA:UNSERIALIZE-WITH-SCHEMA function9351
Ref: SCHEMATA:SCHEMA-DOCUMENTATION function9438
Ref: SCHEMATA:OBJECT-CLASS function9508
Ref: SCHEMATA:ATTRIBUTE-PARSER function9570
Ref: SCHEMATA:ATTRIBUTE-VALIDATOR function9636
Ref: SCHEMATA:ATTRIBUTE-ADD-VALIDATOR function9705
Ref: SCHEMATA:ATTRIBUTE-EXTERNAL-NAME function9778
Ref: SCHEMATA:SCHEMA-TYPE function9851
Ref: SCHEMATA:ATTRIBUTE-FORMATTER function9912
Ref: SCHEMATA:OBJECT-NAME function9981
Ref: SCHEMATA:OBJECT-ATTRIBUTES function10042
Ref: SCHEMATA:ATTRIBUTE-ACCESSOR function10109
Ref: SCHEMATA:ATTRIBUTE-TYPE function10177
Ref: SCHEMATA:ATTRIBUTE-REQUIRED-P function10241
Ref: SCHEMATA:ATTRIBUTE-READER function10332
Ref: SCHEMATA:FIND-OBJECT-ATTRIBUTE function10385
Ref: SCHEMATA:POPULATE-WITH-SCHEMA function10482
Ref: SCHEMATA:SCHEMA-CLASS-SCHEMA function10684
Ref: SCHEMATA:SERIALIZE-WITH-SCHEMA function10800
Ref: SCHEMATA:SCHEMA-SPEC function10986
Ref: SCHEMATA:ATTRIBUTE-TYPE-NAME function11031
Ref: SCHEMATA:VALIDATION-ERROR function11087
Ref: SCHEMATA:VALIDATE-WITH-SCHEMA function11149
Ref: SCHEMATA:ATTRIBUTE-OPTIONAL-P function11990
Ref: SCHEMATA:ATTRIBUTE-WRITER function12047
Ref: SCHEMATA:FIND-SCHEMA function12100
Ref: SCHEMATA:PATCH-WITH-SCHEMA function12203
Ref: SCHEMATA:OBJECT-SCHEMA class12501
Ref: SCHEMATA:SCHEMA-REFERENCE-SCHEMA class13916
Ref: SCHEMATA:LIST-SCHEMA class14215
Ref: SCHEMATA:VALIDATION-ERROR class14558
Ref: SCHEMATA:ATTRIBUTE class14689
Ref: SCHEMATA:TYPE-SCHEMA class15795
Ref: SCHEMATA:SCHEMA class16041
Ref: SCHEMATA:SCHEMA-OBJECT class16492
Ref: SCHEMATA:SCHEMA-CLASS class16592
Node: Index16968

End Tag Table
