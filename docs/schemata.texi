\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@settitle SCHEMATA
@syncodeindex pg cp
@setfilename schemata.info
@include common-lisp.texi

@copying

Copyright @copyright{} 2021 Mariano Montone

@end copying


@dircategory Common Lisp
@direntry
* schemata: (schemata) Common Lisp web forms handling library.
@end direntry

@titlepage
@title SCHEMATA

@author Mariano Montone ( @email{marianomontone@@gmail.com} )
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Top
@cindex schemata

@menu
* Intro::
* Installation::
* Usage::
* Schema types::
* Reference::
* Index::
@end menu

@node Intro
@chapter Introduction
@anchor{introduction}

Generic purpose schema library for serialization and validation of data.

This library is used by CL-REST-SERVER for API serialization and validation.

It features:

@itemize @bullet
@item Validation using schemas.
@item Serialization and unserialization using schemas.
@item Integration with Common Lisp type system.
@item A schema class metaclass.
@end itemize

@node Installation
@chapter Installation
@anchor{installation}


With Quicklisp:

@lisp
(ql:quickload "schemata")
@end lisp

@node Usage
@chapter Usage
@anchor{usage}

Use @clref{SCHEMATA, DEFINE-SCHEMA, macro}for defining schemas.

Schema example:

@lisp
(schemata:define-schema customer
    (object "customer"
             ((id string :external-name "id" :accessor
                  customer-id :documentation "customer id")
              (number string :external-name "number" :required nil
                              :accessor customer-nr :documentation
                      "customer number")
              (name string :external-name "name" :accessor
                    customer-name :documentation "customer name")
              (address-1 string :external-name "address1"
                                 :required nil :documentation
                         "customer first address")
              (address-2 string :external-name "address2"
                                 :required nil :documentation
                         "customer second address")
              (postal-code string :external-name "postalcode"
                                   :required nil :documentation
                           "postal code")
              (postal-area string :external-name "postalarea"
                                   :required nil :documentation
                           "postal area")
              (country string :external-name "country" :required nil 
                       :documentation "country code")
              (phone string :external-name "phone" :required nil
                             :documentation "phone")
              (fax string :external-name "fax" :required nil
                           :documentation "fax")
              (email string :external-name "email" :required nil
                             :documentation "email"))
             (:documentation "customer data fetched")))
@end lisp

@node Schema types
@chapter Schema types
@section Type schemas

Schemas can be built from Common Lisp types:

@verbatim
SCHEMATA> (defparameter *s* (schema string))
*S*
SCHEMATA> *s*
#<TYPE-SCHEMA STRING {1006FBBD13}>
SCHEMATA> (validate-with-schema *s* "22")
NIL
SCHEMATA> (validate-with-schema *s* 22 :error-p nil)
#<VALIDATION-ERROR "~s is not of type: ~a" {100152EB13}>
@end verbatim

@section Object schema

Object schemas are built using the syntax: @code{(object name attributes options)}.
Attributes are specified as: @code{(attribute-name attribute-type &rest options)}.

The @code{attribute-type} is parsed as a schema.

Possible attribute options are: `required`, `required-message`, `default`, `accessor`, `writer`, `reader`, `parser`, `validator`, `add-validator`, `formatter`, `external-name`, `serializer`, `unserializer`, `slot`.

Example:

@verbatim
SCHEMATA> (schema (object person
                          ((name string)
                           (age integer :required nil))))
#<OBJECT-SCHEMA {1001843543}>
@end verbatim

@section List schema

Homogeneous list of schemas are specified via @code{list-of}.

Example:

@verbatim
SCHEMATA> (defparameter *s* (schema (list-of integer)))
*S*
SCHEMATA> (validate-with-schema *s* '(1 2 "foo"))
; Evaluation aborted on #<SCHEMATA:VALIDATION-ERROR "~s is not of type: ~a" {1006ECA323}>.
SCHEMATA> (validate-with-schema *s* '(1 2 3))
NIL
@end verbatim

@section Schema references

Defined schemas can be referenced via either `(schema schema-name)` or `(ref schema-name)` (they are identical).

Example:

@verbatim
SCHEMATA> (define-schema person
            (object person
                    ((name string))))
#<OBJECT-SCHEMA {1006F8A813}>
SCHEMATA> (defparameter *list-of-person* (schema (list-of (ref person))))
*LIST-OF-PERSON*
SCHEMATA> *list-of-person*
#<LIST-SCHEMA {1006F8C2A3}>
SCHEMATA> (parse-with-schema *list-of-person* '((("name" . "Mariano")) (("name" . "Peter"))))
(((NAME . "Mariano")) ((NAME . "Peter")))
SCHEMATA> (validate-with-schema *list-of-person* '((("name" . 22)) (("name" . "Peter"))))
; processing (DEFMETHOD SCHEMA-VALIDATE ...); Evaluation aborted on #<SB-PCL::NO-APPLICABLE-METHOD-ERROR {1008018513}>.
SCHEMATA> (validate-with-schema *list-of-person* '((("name" . 22)) (("name" . "Peter"))))
; Evaluation aborted on #<SCHEMATA:VALIDATION-ERROR "~s is not of type: ~a" {10082EB883}>.
SCHEMATA> (validate-with-schema *list-of-person* '((("name" . "Mariano")) (("name" . "Peter"))))
NIL
SCHEMATA> (validate-with-schema *list-of-person* '((("names" . "Mariano")) (("name" . "Peter"))))
; Evaluation aborted on #<SCHEMATA:VALIDATION-ERROR "Attributes not part of schema: ~a" {1008CD3DD3}>.
@end verbatim

@section SATISFIES-SCHEMA type

Schemata integrates with the Lisp type system via the SATISFIES-SCHEMA type.
Schemas can be thought as types over data.
Defined schemas can be checked using TYPEP and CHECK-TYPE with the type `(satisfies-schema schema-name)`.

Example:

@verbatim
SCHEMATA> (define-schema string-schema string)
#<TYPE-SCHEMA STRING {10019DA8B3}>
SCHEMATA> (typep "foo" '(satisfies-schema string-schema))
T
SCHEMATA> (typep 22 '(satisfies-schema string-schema))
NIL
SCHEMATA> (let ((x "foo"))
            (check-type x (satisfies-schema string-schema))
            x)
"foo"
@end verbatim

@section SCHEMA-CLASS metaclass

SCHEMA-CLASS classes get an schema attached.

Example:

@verbatim
SCHEMATA> (define-schema-class person ()
            ((name :type string :initarg :name)
             (age :type integer :required nil :initarg :age)))
#<SCHEMA-CLASS SCHEMATA::PERSON>

SCHEMATA> (validate-with-schema (find-class 'person) '(("name" . "Mariano") ("age" . 22)))
NIL

SCHEMATA> (validate-with-schema (find-class 'person) '(("name" . "Mariano") ("age" . 'asdf)) :error-p nil)
#<VALIDATION-ERROR 'ASDF is not of type: INTEGER {100109F833}>

SCHEMATA> (generic-serializer:with-serializer :json
            (generic-serializer:serialize (make-instance 'person :name "Mariano" :age 44)))
{"name":"Mariano","age":44}
@end verbatim

@node Reference
@chapter Reference
@anchor{reference}

@menu
* SCHEMATA package::
@end menu

@node SCHEMATA package
@section SCHEMATA package
@deftp PACKAGE SCHEMATA

@end deftp

@heading External definitions

@subheading Macros
@cldefmacro {SCHEMATA, SCHEMA, (schema-def)}

Wrapper macro for schema definitions.
@endcldefmacro

@cldefmacro {SCHEMATA, DEFINE-SCHEMA, (name schema)}

Register SCHEMA under NAME.
The schema can then be accessed via FIND-SCHEMA.
@endcldefmacro

@subheading Generic functions
@cldefgeneric {SCHEMATA, PARSE-WITH-SCHEMA, (schema string-or-data)}

Parses the string to an association list using the schema
@endcldefgeneric

@cldefgeneric {SCHEMATA, ATTRIBUTE-NAME, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, UNSERIALIZE-WITH-SCHEMA, (schema data format)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, SCHEMA-DOCUMENTATION, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, OBJECT-CLASS, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, ATTRIBUTE-PARSER, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, ATTRIBUTE-VALIDATOR, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, ATTRIBUTE-ADD-VALIDATOR, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, ATTRIBUTE-EXTERNAL-NAME, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, SCHEMA-TYPE, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, ATTRIBUTE-FORMATTER, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, OBJECT-NAME, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, OBJECT-ATTRIBUTES, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, ATTRIBUTE-ACCESSOR, (sb-pcl::object)}


@endcldefgeneric

@cldefgeneric {SCHEMATA, ATTRIBUTE-TYPE, (sb-pcl::object)}


@endcldefgeneric

@subheading Functions
@cldefun {SCHEMATA, ATTRIBUTE-READER, (attribute)}


@endcldefun

@cldefun {SCHEMATA, POPULATE-WITH-SCHEMA, (schema object data &key exclude)}

Populate CLOS objects from data + schema.
Attributes members of EXCLUDE parameter are not populated.
@endcldefun

@cldefun {SCHEMATA, SCHEMA-CLASS-SCHEMA, (schema-class)}

Generate a schema using the schema class meta info
@endcldefun

@cldefun {SCHEMATA, SERIALIZE-WITH-SCHEMA, (schema input &optional (serializer generic-serializer::*serializer*) (stream generic-serializer::*serializer-output*))}


@endcldefun

@cldefun {SCHEMATA, SCHEMA-SPEC, (schema)}


@endcldefun

@cldefun {SCHEMATA, ATTRIBUTE-TYPE-NAME, (attribute)}


@endcldefun

@cldefun {SCHEMATA, VALIDATION-ERROR, (message &rest args)}


@endcldefun

@cldefun {SCHEMATA, VALIDATE-WITH-SCHEMA, (schema data &key (collect-errors *collect-validation-errors*) (error-p *signal-validation-errors*))}

Validate input using schema.
Useful for validating resource operations posted content (for :post and :put methods).
Input can be a string or an association list.

Args:
  - schema (symbol or schema): The schema
  - data (alist): The data to validate.
  - format (keyword): The data format.
  - collect-errors (boolean): If true, collect all the validation errors. If false, return the first validation error found. Default: true.
  - error-p (boolean): If true, when validation errors are found, a validation error is signaled. If false, the validation errors are returned as the function result and no error is signaled.
@endcldefun

@cldefun {SCHEMATA, ATTRIBUTE-OPTIONAL-P, (attribute)}


@endcldefun

@cldefun {SCHEMATA, ATTRIBUTE-WRITER, (attribute)}


@endcldefun

@cldefun {SCHEMATA, FIND-OBJECT-ATTRIBUTE, (object attribute-name &key (error-p t))}


@endcldefun

@cldefun {SCHEMATA, FIND-SCHEMA, (name &optional (errorp t))}

Find a schema definition by name
@endcldefun

@cldefun {SCHEMATA, PATCH-WITH-SCHEMA, (schema object data)}

Populate CLOS objects from data + schema.
Only populates attributes available in DATA, validating them.
Useful for PATCH rest api operations implementations.
DATA should be an association list.
@endcldefun

@subheading Classes
@cldefclass {SCHEMATA, OBJECT-SCHEMA}



Class precedence list: @code{object-schema, schema, standard-object, t}

Slots:
@itemize
@item @code{name} --- type: @code{@w{(or string symbol)}}; initarg: @code{@w{:name}}; reader: @code{@w{schemata:object-name}}; writer: @code{@w{(setf schemata:object-name)}}

The name of the object.@item @code{attributes} --- type: @code{@w{list}}; initarg: @code{@w{:attributes}}; reader: @code{@w{schemata:object-attributes}}; writer: @code{@w{(setf schemata:object-attributes)}}

@item @code{class} --- type: @code{@w{(or null symbol)}}; initarg: @code{@w{:class}}; reader: @code{@w{schemata:object-class}}; writer: @code{@w{(setf schemata:object-class)}}

@item @code{ignore-unknown-attributes} --- type: @code{@w{boolean}}; initarg: @code{@w{:ignore-unknown-attributes}}; reader: @code{@w{schemata::ignore-unknown-attributes}}; writer: @code{@w{(setf schemata::ignore-unknown-attributes)}}

@item @code{serializer} --- type: @code{@w{(or null
                                               trivial-types:function-designator)}}; initarg: @code{@w{:serializer}}; reader: @code{@w{schemata::object-serializer}}; writer: @code{@w{(setf schemata::object-serializer)}}

@item @code{unserializer} --- type: @code{@w{(or null
                                                 trivial-types:function-designator)}}; initarg: @code{@w{:unserializer}}; reader: @code{@w{schemata::object-unserializer}}; writer: @code{@w{(setf schemata::object-unserializer)}}

@end itemize

@endcldefclass

@cldefclass {SCHEMATA, SCHEMA-REFERENCE-SCHEMA}



Class precedence list: @code{schema-reference-schema, schema, standard-object, t}

Slots:
@itemize
@item @code{name} --- type: @code{@w{symbol}}; initarg: @code{@w{:schema-name}}; reader: @code{@w{schemata::schema-name}}; writer: @code{@w{(setf schemata::schema-name)}}

@end itemize

@endcldefclass

@cldefclass {SCHEMATA, SCHEMA}



Class precedence list: @code{schema, standard-object, t}

Slots:
@itemize
@item @code{documentation} --- type: @code{@w{t}}; initarg: @code{@w{:documentation}}; reader: @code{@w{schemata:schema-documentation}}; writer: @code{@w{(setf schemata:schema-documentation)}}

@end itemize

@endcldefclass

@cldefclass {SCHEMATA, VALIDATION-ERROR}



Class precedence list: @code{validation-error, error, serious-condition, condition, t}

@endcldefclass

@cldefclass {SCHEMATA, ATTRIBUTE}



Class precedence list: @code{attribute, schema, attribute-properties, standard-object, t}

Slots:
@itemize
@item @code{name} --- type: @code{@w{symbol}}; initarg: @code{@w{:name}}; reader: @code{@w{schemata:attribute-name}}; writer: @code{@w{(setf schemata:attribute-name)}}

@item @code{type} --- type: @code{@w{schemata:schema}}; initarg: @code{@w{:type}}; reader: @code{@w{schemata:attribute-type}}; writer: @code{@w{(setf schemata:attribute-type)}}

@item @code{accessor} --- type: @code{@w{(or null symbol)}}; initarg: @code{@w{:accessor}}; reader: @code{@w{schemata:attribute-accessor}}; writer: @code{@w{(setf schemata:attribute-accessor)}}

@item @code{writer} --- type: @code{@w{(or null
                                           trivial-types:function-designator)}}; initarg: @code{@w{:writer}}

@item @code{reader} --- type: @code{@w{(or null
                                           trivial-types:function-designator)}}; initarg: @code{@w{:reader}}

@item @code{slot} --- type: @code{@w{(or null symbol)}}; initarg: @code{@w{:slot}}; reader: @code{@w{schemata::attribute-slot}}; writer: @code{@w{(setf schemata::attribute-slot)}}

@end itemize

@endcldefclass

@cldefclass {SCHEMATA, TYPE-SCHEMA}



Class precedence list: @code{type-schema, schema, standard-object, t}

Slots:
@itemize
@item @code{type} --- type: @code{@w{t}}; initarg: @code{@w{:type}}; reader: @code{@w{schemata:schema-type}}; writer: @code{@w{(setf schemata:schema-type)}}

@end itemize

@endcldefclass

@cldefclass {SCHEMATA, SCHEMA-OBJECT}



Class precedence list: @code{schema-object, standard-object, t}

@endcldefclass

@cldefclass {SCHEMATA, SCHEMA-CLASS}

Metaclass for schema objects

Class precedence list: @code{schema-class, standard-class, class, specializer, metaobject, standard-object, t}

Slots:
@itemize
@item @code{schema-name} --- type: @code{@w{(or null string symbol)}}; initarg: @code{@w{:schema-name}}; reader: @code{@w{schemata::schema-name}}; writer: @code{@w{(setf schemata::schema-name)}}

@end itemize

@endcldefclass



@node Index
@chapter Index

@printindex cp
@printindex vr
@printindex fn

@bye
